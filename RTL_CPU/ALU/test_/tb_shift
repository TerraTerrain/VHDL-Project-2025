library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- Assuming these packages contain your custom type definitions
-- (adjust as per your project structure)
use work.chdl_types.all;

entity tb_shift is
end tb_shift;

architecture sim of tb_shift is

    -- Signals for DUT connections
    signal data_in  : DataType    := (others => '0');
    signal func3    : Func3Type   := (others => '0');
    signal func7    : Func7Type   := (others => '0');
    signal data_out : DataType;

begin

    -- Instantiate the DUT
    uut: entity work.shift
        port map (
            data_in  => data_in,
            func3    => func3,
            func7    => func7,
            data_out => data_out
        );

    -- Stimulus process
    stim_proc: process
    begin
        -- Test SLL (Shift Left Logical)
        data_in <= x"0000_0001";          -- 0b...0001
        func3   <= "001";                 -- SLL
        func7   <= Func7ShLog;
        wait for 10 ns;

        -- Test SRL (Shift Right Logical)
        data_in <= x"8000_0000";          -- 0b1000...0000
        func3   <= "101";                 -- SRL
        func7   <= Func7ShLog;
        wait for 10 ns;

        -- Test SRA (Shift Right Arithmetic)
        data_in <= x"F000_0000";          -- Negative number
        func3   <= "101";                 -- SRA
        func7   <= Func7ShArith;
        wait for 10 ns;

        -- Invalid func3 under Func7ShLog
        data_in <= x"1234_5678";
        func3   <= "010";                 -- Not defined
        func7   <= Func7ShLog;
        wait for 10 ns;

        -- Invalid func3 under Func7ShArith
        data_in <= x"8765_4321";
        func3   <= "011";                 -- Not defined
        func7   <= Func7ShArith;
        wait for 10 ns;

        -- Invalid func7
        data_in <= x"1111_1111";
        func3   <= "101";
        func7   <= "1111111";             -- Unknown func7
        wait for 10 ns;

        wait;
    end process;

end sim;
