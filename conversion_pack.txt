library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use WORK.defs_pack.all;

package conversion_pack is
    function bv2int(input: bit_vector) return integer;
    function int2bv(value: integer; length: integer) return bit_vector;
    function sign_extend(imm : bit_vector) return bit_vector;
    function zero_extend(imm : bit_vector) return bit_vector;
    function Mem32(Mem: MemType; address: bit_vector) return BusDataType;
    function Mem16(Mem: MemType; address: bit_vector) return bit_vector;
    function Mem8(Mem: MemType; address: bit_vector) return bit_vector;
end conversion_pack;



package body conversion_pack is
    function bv2int(input: bit_vector) return integer is
        variable result : integer := 0;
        variable bit_length : integer := input'length;
    begin
        for i in input'range loop
            if input(i) = '1' then
                result := result + (2 ** (bit_length - 1 - i));
            end if;
        end loop;
    return result;
    end function;
    
    function int2bv(value: integer; length: integer) return bit_vector is
        variable result : bit_vector(length-1 downto 0) := (others => '0');
        variable temp_value : integer := value;
    begin
        for i in result'range loop
            if temp_value mod 2 = 1 then
                result(i) := '1';
            end if;
            temp_value := temp_value / 2;
        end loop;
        return result;
    end function;
    
    function sign_extend(imm : bit_vector) return bit_vector is
        constant extend_length : integer := 32 - imm'length;
        variable extended_imm : bit_vector(31 downto 0);
    begin
        -- Extend with the MSB of the input
        extended_imm := (extend_length - 1 downto 0 => imm(imm'length - 1)) & imm;
        return extended_imm;
    end function;
    
    function zero_extend(imm : bit_vector) return bit_vector is
        constant extend_length : integer := 32 - imm'length;
        variable extended_imm : bit_vector(31 downto 0);
    begin
        -- Extend with the MSB of the input
        extended_imm := (extend_length - 1 downto 0 => '0') & imm;
        return extended_imm;
    end function;    
    
    function Mem32(Mem: MemType; address: bit_vector) return BusDataType is
        variable word_addr : integer := bv2int(address(15 downto 2)); -- Word address
        variable result    : BusDataType := (others => '0');
    begin
        result := Mem(word_addr); -- Directly load the 32-bit word
        return result;
    end function;
    
    function Mem16(Mem: MemType; address: bit_vector) return bit_vector is
        variable word_addr : integer     := bv2int(address(15 downto 2)); -- Word address
        variable offset    : integer     := bv2int(address(1 downto 0)); -- Byte offset
        variable word      : BusDataType := Mem(word_addr);
        variable result    : bit_vector(15 downto 0);
    begin
        case offset is
            when 0 => -- Lower half word
                result := word(15 downto 0);
            when 2 => -- Upper half word
                result := word(31 downto 16);
            when others =>
                assert FALSE report "Invalid offset" severity error;
        end case;
        return result;
    end function;
    
    function Mem8(Mem: MemType; address: bit_vector) return bit_vector is
        variable word_addr : integer     := bv2int(address(15 downto 2)); -- Word address
        variable offset    : integer     := bv2int(address(1 downto 0)); -- Byte offset
        variable word      : BusDataType := Mem(word_addr);
        variable result    : bit_vector(7 downto 0);
    begin
        case offset is
            when 0 => -- Byte 0 (least significant byte)
                result := word(7 downto 0);
            when 1 => -- Byte 1
                result := word(15 downto 8);
            when 2 => -- Byte 2
                result := word(23 downto 16);
            when 3 => -- Byte 3 (most significant byte)
                result := word(31 downto 24);
            when others =>
                assert FALSE report "Invalid offset" severity error;
        end case;
        return result;
    end function;    
    
end conversion_pack;
