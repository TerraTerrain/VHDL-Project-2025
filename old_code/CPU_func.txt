library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_BIT.ALL;
use WORK.defs_pack.all;
use WORK.conversion_pack.all;
use WORK.mem_pack.all;
use WORK.tracer_pack.all;

entity RISCV is
end RISCV;

architecture Functional of RISCV is
begin
    process
        variable initmem_flag : boolean     := FALSE; 
        variable PC           : AddrType    := X"0000";
        variable Instr        : InstrType   := (others=>'0');
        variable OP           : OpType      := (others=>'0');
        variable func3        : Func3Type   := (others=>'0');
        variable func7        : Func7Type   := (others=>'0');
        variable rs1, rs2, rd : RegAddrType := (others=>'0');
        variable imm12        : Imm12Type   := (others=>'0');
        variable imm20        : Imm20Type   := (others=>'0');
        
        variable Reg          : RegType     := (others=>(others=>'0'));
        variable Mem          : MemType     := (others=>(others=>'0'));
    begin
        if not(initmem_flag) then
            Mem := init_memory("memory_init.mem");  -- Initialize memory from a file
            init_trace_files("register_trace.txt", "memory_trace.txt");
            trace_registers("register_trace.txt", Reg);
            trace_memory("memory_trace.txt", Mem);
            initmem_flag := TRUE;
        end if;
        Instr := Mem (bv2int(PC(15 downto 2)));
        OP    := Instr (6 downto 0);
        func3 := Instr (14 downto 12);
        func7 := Instr (31 downto 25); -- also used as 1st immediate part for branches and stores
        rs1   := Instr (19 downto 15);
        rs2   := Instr (24 downto 20); -- also immediately used for shifts as shamt
        rd    := Instr (11 downto 7); -- also used as 2nd immediate part for branches and stores
        imm12 := Instr (31 downto 20);
        imm20 := Instr (31 downto 12);
        
        case OP is
            when OpImm    => 
                case func3 is
                    when Func3Arthm     =>
                        Reg(bv2int(rd)) := int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(imm12), RegDataSize ); -- ADDI
                    when Func3XOR       =>
                        Reg(bv2int(rd)) := Reg(bv2int(rs1)) xor sign_extend(imm12); -- XORI
                    when Func3OR        =>
                        Reg(bv2int(rd)) := Reg(bv2int(rs1)) or sign_extend(imm12); -- ORI
                    when Func3AND       =>
                        Reg(bv2int(rd)) := Reg(bv2int(rs1)) and sign_extend(imm12); -- ANDI
                    when Func3SLL       => 
                        case func7 is
                            when Func7ShLog =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) sll bv2int(rs2); -- SLLI, rs2 as shamt
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3SRL_SRA   => 
                        case func7 is
                            when Func7ShLog   =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) srl bv2int(rs2); -- SRLI, rs2 as shamt
                            when Func7ShArthm =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) sra bv2int(rs2); -- SRAI, rs2 as shamt
                            when others       =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3SLT       => -- SLTI
                        if signed(Reg(bv2int(rs1))) < signed(sign_extend(imm12)) then 
                            Reg(bv2int(rd)) := "1";
                        else Reg(bv2int(rd)) := "0";
                        end if;
                    when Func3SLTU      => -- SLTIU
                        if unsigned(Reg(bv2int(rs1))) < unsigned(sign_extend(imm12)) then 
                            Reg(bv2int(rd)) := "1";
                        else Reg(bv2int(rd)) := "0";
                        end if;
                    when others         =>
                        assert FALSE report "Illegal instruction" severity error;
                end case;
                
            when OpReg    => 
                case func3 is
                    when Func3Arthm => 
                        case func7 is
                            when Func7ADD =>
                                Reg(bv2int(rd)) := int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(Reg(bv2int(rs2))), RegDataSize ); -- ADD
                            when Func7SUB =>
                                Reg(bv2int(rd)) := int2bv( bv2int(Reg(bv2int(rs1))) - bv2int(Reg(bv2int(rs2))), RegDataSize ); -- SUB
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3XOR  => 
                        case func7 is
                            when Func7Log =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) xor Reg(bv2int(rs2)); -- XOR
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3OR   => 
                        case func7 is
                            when Func7Log =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) or Reg(bv2int(rs2)); -- OR
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3AND  => 
                        case func7 is
                            when Func7Log =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) and Reg(bv2int(rs2)); -- AND
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3SLL  => 
                        case func7 is
                            when Func7ShLog =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) sll bv2int(Reg(bv2int(rs2)));   -- SLL
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3SRL_SRA  =>
                        case func7 is
                            when Func7ShLog =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) srl bv2int(Reg(bv2int(rs2)));   -- SRL
                            when Func7ShArthm =>
                                Reg(bv2int(rd)) := Reg(bv2int(rs1)) sra bv2int(Reg(bv2int(rs2))); -- SRA
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3SLT  => 
                        case func7 is
                            when Func7Set => -- SLT
                                if signed(Reg(bv2int(rs1))) < signed(Reg(bv2int(rs2))) then 
                                    Reg(bv2int(rd)) := "1";
                                else Reg(bv2int(rd)) := "0";
                                end if;
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when Func3SLTU => 
                        case func7 is
                            when Func7Set => -- SLTU
                                if unsigned(Reg(bv2int(rs1))) < unsigned(Reg(bv2int(rs2))) then 
                                    Reg(bv2int(rd)) := "1";
                                else Reg(bv2int(rd)) := "0";
                                end if;
                            when others   =>
                                assert FALSE report "Illegal instruction" severity error;
                        end case;
                    when others    =>
                        assert FALSE report "Illegal instruction" severity error;
                end case;    
                
            when OpLoad   =>
                case func3 is
                    when Func3LB  => -- LB
                        Reg(bv2int(rd)) := sign_extend(Mem8( Mem, int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(imm12), RegDataSize)));
                    when Func3LH  => -- LH
                        Reg(bv2int(rd)) := sign_extend(Mem16( Mem, int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(imm12), RegDataSize)));
                    when Func3LW  => -- LW
                        Reg(bv2int(rd)) := Mem32( Mem, int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(imm12), RegDataSize));
                    when Func3LBU => -- LBU
                        Reg(bv2int(rd)) := zero_extend(Mem8( Mem, int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(imm12), RegDataSize)));
                    when Func3LHU => -- LHU
                        Reg(bv2int(rd)) := zero_extend(Mem16( Mem, int2bv( bv2int(Reg(bv2int(rs1))) + bv2int(imm12), RegDataSize)));
                    when others   =>
                        assert FALSE report "Illegal instruction" severity error;
                end case;    
    
            when OpLUI    =>  -- LUI        
                 Reg(bv2int(rd)) := imm20 & X"000";
            when OpAUIPC  =>  -- AUIPC
                 Reg(bv2int(rd)) := int2bv(bv2int(PC) + bv2int(imm20 & X"000"), RegDataSize);
            
            when OpStore  => 
                
                case func3 is
                    when Func3SB => -- SB
                        case (bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd))) mod 4 is -- check the last 2 bits of address
                            when 0 => -- Lower half-word (aligned)
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) )(7 downto 0) := Reg(bv2int(rs2))(7 downto 0);
                            when 1 => -- Upper half-word
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) )(15 downto 8) := Reg(bv2int(rs2))(7 downto 0);
                            when 2 => -- Lower half-word (aligned)
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) )(23 downto 16) := Reg(bv2int(rs2))(7 downto 0);
                            when 3 => -- Upper half-word
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) )(31 downto 24) := Reg(bv2int(rs2))(7 downto 0);
                            when others =>
                                assert FALSE report "Unaligned address for SB" severity error;
                        end case;
                    when Func3SH => -- SH
                        case (bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd))) mod 4 is -- check the last 2 bits of address
                            when 0 => -- Lower half-word (aligned)
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) )(15 downto 0) := Reg(bv2int(rs2))(15 downto 0);
                            when 2 => -- Upper half-word
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) )(31 downto 16) := Reg(bv2int(rs2))(15 downto 0);
                            when others =>
                                assert FALSE report "Unaligned address for SH" severity error;
                        end case;
                    when Func3SW => -- SW
                        case (bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd))) mod 4 is -- check the last 2 bits of address
                            when 0 =>
                                Mem( bv2int(Reg(bv2int(rs1))) + bv2int((func7 & rd)) ) := Reg(bv2int(rs2));
                            when others =>
                                assert FALSE report "Unaligned address for SW" severity error;
                        end case;
                    when others  =>
                        assert FALSE report "Illegal instruction" severity error;
                end case;    
            
            when OpBranch => 
                  case func3 is
                      when Func3BEQ  => -- BEQ
                          if Reg(bv2int(rs1)) = Reg(bv2int(rs2)) then
                              PC := int2bv(bv2int(PC) + bv2int(func7(6) & rd(0) & func7(5 downto 0) & rd(4 downto 1) & '0'), AddrSize);
                          else
                              PC := int2bv(bv2int(PC) + 4, AddrSize);
                          end if;
                      when Func3BNE  => -- BNE
                          if Reg(bv2int(rs1)) /= Reg(bv2int(rs2)) then
                              PC := int2bv(bv2int(PC) + bv2int(func7(6) & rd(0) & func7(5 downto 0) & rd(4 downto 1) & '0'), AddrSize);
                          else
                              PC := int2bv(bv2int(PC) + 4, AddrSize);
                          end if;
                      when Func3BLT  => -- BLT
                          if signed(Reg(bv2int(rs1))) < signed(Reg(bv2int(rs2))) then
                              PC := int2bv(bv2int(PC) + bv2int(func7(6) & rd(0) & func7(5 downto 0) & rd(4 downto 1) & '0'), AddrSize);
                          else
                              PC := int2bv(bv2int(PC) + 4, AddrSize);
                          end if;
                      when Func3BGE  => -- BGE
                          if signed(Reg(bv2int(rs1))) >= signed(Reg(bv2int(rs2))) then
                              PC := int2bv(bv2int(PC) + bv2int(func7(6) & rd(0) & func7(5 downto 0) & rd(4 downto 1) & '0'), AddrSize);
                          else
                              PC := int2bv(bv2int(PC) + 4, AddrSize);
                          end if;
                      when Func3BLTU => -- BLTU
                          if unsigned(Reg(bv2int(rs1))) < unsigned(Reg(bv2int(rs2))) then
                              PC := int2bv(bv2int(PC) + bv2int(func7(6) & rd(0) & func7(5 downto 0) & rd(4 downto 1) & '0'), AddrSize);
                          else
                              PC := int2bv(bv2int(PC) + 4, AddrSize);
                          end if;
                      when Func3BGEU => -- BGEU
                          if unsigned(Reg(bv2int(rs1))) >= unsigned(Reg(bv2int(rs2))) then
                              PC := int2bv(bv2int(PC) + bv2int(func7(6) & rd(0) & func7(5 downto 0) & rd(4 downto 1) & '0'), AddrSize);
                          else
                              PC := int2bv(bv2int(PC) + 4, AddrSize);
                          end if;
                      when others    =>
                          assert FALSE report "Illegal instruction" severity error;
                  end case;   
                   
            when OpJump   => -- JAL
                Reg(bv2int(rd)) :=  int2bv(bv2int(PC) + 4, RegDataSize);
                PC := int2bv(bv2int(PC) + bv2int(imm20), AddrSize);  
                
            when OpJumpReg   =>
                case func3 is
                    when Func3JALR => -- JALR
                        Reg(bv2int(rd)) :=  int2bv(bv2int(PC) + 4, RegDataSize);
                        PC := int2bv(bv2int(Reg(bv2int(rs1))) + bv2int(imm12), AddrSize);
                    when others   =>
                        assert FALSE report "Illegal instruction" severity error;
                end case;
                
            when others   =>
                assert FALSE report "Illegal instruction" severity error;
    end case;
    -- update program counter
    PC    := int2bv(bv2int(PC) + 4, AddrSize);
    trace_registers("register_trace.txt", Reg);
    trace_memory("memory_trace.txt", Mem);
    end process;
end Functional;
