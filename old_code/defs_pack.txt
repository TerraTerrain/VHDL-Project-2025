library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

package defs_pack is
-- Basic constants and types
    --PC, addr wire of bus, memory depth
    constant AddrSize       : integer := 16;
    constant ByteAddrSize   : integer := 2;
    constant MemoryAddrSize : integer := AddrSize - ByteAddrSize;
    
    --instruction, opcode size
    constant InstrSize : integer := 32;
    constant OpSize    : integer := 7;
    
    --data wire of bus, memory width
    constant BusDataSize : integer := 32;
    
    --register sizes
    constant RegDataSize: integer := 32;
    constant RegAddrSize: integer := 5;
    
    subtype AddrType  is bit_vector (AddrSize-1 downto 0); 
    subtype InstrType is bit_vector (InstrSize-1 downto 0);
    
    subtype OpType    is bit_vector (OpSize-1 downto 0);
    subtype Func3Type is bit_vector (2 downto 0);
    subtype Func7Type is bit_vector (6 downto 0);
    subtype Imm12Type is bit_vector (11 downto 0);
    subtype Imm20Type is bit_vector (19 downto 0);
    
    subtype BusDataType is bit_vector (BusDataSize-1 downto 0);
    subtype RegDataType is bit_vector (RegDataSize-1 downto 0);
    subtype RegAddrType is bit_vector (0 to 2**RegAddrSize-1);
    
    type RegType is array (integer range 2**RegAddrSize-1    downto 0) of RegDataType;
    type MemType is array (integer range 2**MemoryAddrSize-1 downto 0) of BusDataType;
    
    type MnemonicType is (LB, LBU, LH, LHU, LW, SB, SH, SW, LUI, AUIPC,
                          ADD, SUB, ADDI, XORr, ORr, ANDr, XORI, ORI, ANDI,
                          SLLr, SRLr, SRAr, SLLI, SRLI, SRAI,
                          SLT, SLTU, SLTI, SLTIU, JAL, JALR,
                          BEQ, BNE, BLT, BLTU, BGE, BGEU);
                          
-- Instruction constants
    -- Imm/Reg Opcode
    constant OpImm : OpType := "0010011";
    constant OpReg : OpType := "0110011";

    -- Load instructions
    constant OpLoad   : OpType    := "0000011";
    constant Func3LB  : Func3Type := "000";
    constant Func3LH  : Func3Type := "001";
    constant Func3LW  : Func3Type := "010";
    constant Func3LBU : Func3Type := "100";
    constant Func3LHU : Func3Type := "101";
    
    constant OpLUI    : OpType    := "0110111";
    constant OpAUIPC  : OpType    := "0010111";
    
    -- Store instructions
    constant OpStore  : OpType    := "0100011";
    constant Func3SB  : Func3Type := "000";
    constant Func3SH  : Func3Type := "001";
    constant Func3SW  : Func3Type := "010";
    
    -- Arithmetic instructions
    constant Func7ADD   : Func7Type := "0000000";
    constant Func7SUB   : Func7Type := "0100000";
    constant Func3Arthm : Func3Type := "000";
    
    -- Logical instructions
    constant Func3XOR : Func3Type := "100";
    constant Func3OR  : Func3Type := "110";
    constant Func3AND : Func3Type := "111";
    constant Func7Log : Func7Type := "0000000";
    
    -- Shift instructions
    constant Func3SLL     : Func3Type := "001";
    constant Func3SRL_SRA : Func3Type := "101";
    constant Func7ShLog   : Func7Type := "0000000"; 
    constant Func7ShArthm : Func7Type := "0100000";  
    
    -- Compare instructions
    constant Func3SLT  : Func3Type := "010";
    constant Func3SLTU : Func3Type := "011";
    constant Func7Set  : Func7Type := "0000000";
        
    -- Branch instructions
    constant OpBranch  : OpType    := "1100011";
    constant Func3BEQ  : Func3Type := "000";
    constant Func3BNE  : Func3Type := "001";
    constant Func3BLT  : Func3Type := "100";
    constant Func3BGE  : Func3Type := "101";
    constant Func3BLTU : Func3Type := "110";
    constant Func3BGEU : Func3Type := "111";
        
    -- Jump/Link instructions
    constant OpJump    : OpType    := "1101111";
    constant OpJumpReg : OpType    := "1100111";
    constant Func3JALR : Func3Type := "000";
    
    
    
-- Constants for symbolic register names
    constant x00 : RegAddrType := "00000";
    constant x01 : RegAddrType := "00001";
    constant x02 : RegAddrType := "00010";
    constant x03 : RegAddrType := "00011";
    constant x04 : RegAddrType := "00100";
    constant x05 : RegAddrType := "00101";
    constant x06 : RegAddrType := "00110";
    constant x07 : RegAddrType := "00111";
    constant x08 : RegAddrType := "01000";
    constant x09 : RegAddrType := "01001";
    constant x10 : RegAddrType := "01010";
    constant x11 : RegAddrType := "01011";
    constant x12 : RegAddrType := "01100";
    constant x13 : RegAddrType := "01101";
    constant x14 : RegAddrType := "01110";
    constant x15 : RegAddrType := "01111";
    constant x16 : RegAddrType := "10000";
    constant x17 : RegAddrType := "10001";
    constant x18 : RegAddrType := "10010";
    constant x19 : RegAddrType := "10011";
    constant x20 : RegAddrType := "10100";
    constant x21 : RegAddrType := "10101";
    constant x22 : RegAddrType := "10110";
    constant x23 : RegAddrType := "10111";
    constant x24 : RegAddrType := "11000";
    constant x25 : RegAddrType := "11001";
    constant x26 : RegAddrType := "11010";
    constant x27 : RegAddrType := "11011";
    constant x28 : RegAddrType := "11100";
    constant x29 : RegAddrType := "11101";
    constant x30 : RegAddrType := "11110";
    constant x31 : RegAddrType := "11111";
    
end defs_pack;
